# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

# MPC_PRODUCT_ID (v3) c5bd8ac5-4b9b-4aa2-8cdb-dd91b6e22a5d, (v2) 2eb9e4aa-4247-4a90-8f11-39c25390f701
# GOOGLE_APP_ID  (v3) fbbpbfibkcdehkkkcoileebbgbamjelh, (v2) gnhhdgbaldcilmgcpfddgdbkhjohddkj

name: extension

on:
    workflow_dispatch:
    push:
        tags:
            - '*'
        branches: ['main']
        paths-ignore:
            - '.github/**'
    pull_request:
        branches: ['main']

jobs:
    build:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [20.x]

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'
            - run: npm ci --legacy-peer-deps

            - run: npm run build --if-present

            - run: cat manifest.json

            - name: Cache build files
              uses: actions/cache@v4
              id: build-cache
              with:
                  path: |
                      dist
                      src
                      manifest.json
                      _locales
                  key: nim-cache-build-${{ github.sha }}

    test:
        needs: build
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [20.x]
                shard: [1, 2, 3, 4, 5]

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'

            - name: Restore cache build files
              uses: actions/cache@v4
              id: build-cache
              with:
                  path: |
                      dist
                      src
                      manifest.json
                      _locales
                  key: nim-cache-build-${{ github.sha }}
            - run: npm ci --legacy-peer-deps

            - name: Update system (Ubuntu)
              if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-18.04'
              run: sudo apt update && sudo apt upgrade -y

            - run: npx playwright install-deps
            - run: npx playwright install
            - run: xvfb-run npm run test -- --shard=${{ matrix.shard }}/${{ strategy.job-total }}

    package:
        needs: build
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [20.x]

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'

            - name: Restore cache build files
              uses: actions/cache@v4
              id: build-cache
              with:
                  path: |
                      dist
                      src
                      manifest.json
                      _locales
                  key: nim-cache-build-${{ github.sha }}

            - name: Set zip name
              run: echo "ZIP_NAME=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

            - name: Zip
              run: zip -r ${ZIP_NAME}.zip ./dist ./src/*.js ./manifest.json ./_locales
              shell: bash

            - name: Upload zip artifact
              uses: actions/upload-artifact@v4
              with:
                  path: ${{ env.ZIP_NAME }}.zip

    post-package-test:
        needs: package
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [20.x]
                shard: [1, 2, 3, 4, 5]

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'

            - name: Download package
              uses: actions/download-artifact@v4
              with:
                  path: '/tmp'

            - name: Unzip
              run: unzip /tmp/artifact/*.zip -d /tmp/artifact

            - name: Set PATH_TO_EXTENSION env
              run: echo "PATH_TO_EXTENSION=/tmp/artifact" >> $GITHUB_ENV

            - run: npm ci --legacy-peer-deps
            - run: npx playwright install-deps
            - run: npx playwright install
            - run: ls ${{env.PATH_TO_EXTENSION}}
            - run: export PATH_TO_EXTENSION=${{env.PATH_TO_EXTENSION}} && xvfb-run npm run test:post -- --shard=${{ matrix.shard }}/${{ strategy.job-total }}

    deploy-edge:
        needs: post-package-test
        runs-on: ubuntu-latest

        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - name: Download package
              uses: actions/download-artifact@v4
              with:
                  path: '/tmp'

            - name: Set zip name
              run: echo "ZIP_NAME=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

            - name: Publish using Microsoft Partner Center Publish API (V2)
              run: |
                  certificationNotes=$(echo "{
                      \"notes\": \"Submitted via GitHub Actions. Commit: $GITHUB_SHA on ref: $GITHUB_REF\"
                  }")

                  ls -laR /tmp/artifact

                  ApiKey=${{ secrets.MPC_API_KEY }}
                  ClientID=${{ vars.MPC_CLIENT_ID }}
                  
                  # Uploading a package to update an existing submission
                  echo "Uploading a package to update an existing submission"
                  response=$(curl -s -i -D /tmp/headers -w 'status: %{response_code}\n' -X POST https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V2 }}/submissions/draft/package \
                    -H "Authorization: ApiKey $ApiKey" \
                    -H "Authorization: X-ClientID $ClientID" \
                    -H 'Content-Type: application/zip' \
                    -T /tmp/artifact/${{ env.ZIP_NAME }}.zip)
                  if [ -n "$(echo $response | egrep "status:\s*202")" ]; then
                    operationID=$(cat /tmp/headers | egrep -i "location:\s*" | cut -f2 -d":" | awk '{$1=$1};1' | tr -d '\r')
                    # Checking the status of a package upload
                    echo "Checking the status of a package upload"
                    response=$(curl -s -w 'status: %{response_code}\n' -o /dev/null https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V2 }}/submissions/draft/package/operations/$operationID \
                      -H "Authorization: X-ClientID $ClientID" \
                      -H "Authorization: ApiKey $ApiKey")
                    echo $response
                    retries=0
                    while [ -z $(echo $response | egrep "status:\s*200")]; do
                      if [ $retries -gt 10 ]; then
                        echo "Exiting (Checking the status of a package upload) after 10 retries!"
                        exit 1
                      fi
                      sleep 5
                      response=$(curl -w 'status: %{response_code}\n' -v https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V2 }}/submissions/draft/package/operations/$operationID \
                        -H "Authorization: X-ClientID $ClientID" \
                        -H "Authorization: ApiKey $ApiKey")
                      retries=$(($retries+1))
                    done
                    # Publishing the submission
                    echo "Publishing the submission"
                    response=$(curl -s -i -D /tmp/headers2 -w 'status: %{response_code}\n' -o /dev/null https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V2 }}/submissions \
                      -H "Authorization: ApiKey $ApiKey" \
                      -H "Authorization: X-ClientID $ClientID" \
                      -d "$certificationNotes")
                    if [ -n "$(echo $response | egrep "status:\s*202")" ]; then
                      operationID=$(cat /tmp/headers2 | egrep -i "location:\s*" | cut -f2 -d":" | awk '{$1=$1};1' | tr -d '\r')
                      # Checking the publishing status
                      response=$(curl -s -w 'status: %{response_code}\n' -o /dev/null https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V2 }}/submissions/operations/$operationID \
                        -H "Authorization: X-ClientID $ClientID" \
                        -H "Authorization: ApiKey $ApiKey")
                      retries=0
                      while [ -z $(echo $response | egrep "status:\s*200")]; do
                        if [ $retries -gt 10 ]; then
                          echo "Exiting (Checking the publishing status) after 10 retries!"
                          exit 1
                        fi
                        sleep 5
                        response=$(curl -w 'status: %{response_code}\n' -v https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V2 }}/submissions/operations/$operationID \
                          -H "Authorization: X-ClientID $ClientID" \
                          -H "Authorization: ApiKey $ApiKey")
                        retries=$(($retries+1))
                      done
                    fi
                  else
                    echo "Package upload failed"
                    echo $response
                    exit 1
                  fi
                  exit 0
              shell: bash
            - name: Publish using Microsoft Partner Center Publish API (V3)
              run: |
                  certificationNotes=$(echo "{
                      \"notes\": \"Submitted via GitHub Actions. Commit: $GITHUB_SHA on ref: $GITHUB_REF\"
                  }")

                  ls -laR /tmp/artifact

                  ApiKey=${{ secrets.MPC_API_KEY }}
                  ClientID=${{ vars.MPC_CLIENT_ID }}

                  # Uploading a package to update an existing submission
                  echo "Uploading a package to update an existing submission"
                  response=$(curl -s -i -D /tmp/headers -w 'status: %{response_code}\n' -X POST https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V3 }}/submissions/draft/package \
                    -H "Authorization: ApiKey $ApiKey" \
                    -H "Authorization: X-ClientID $ClientID" \
                    -H 'Content-Type: application/zip' \
                    -T /tmp/artifact/${{ env.ZIP_NAME }}.zip)
                  if [ -n "$(echo $response | egrep "status:\s*202")" ]; then
                    operationID=$(cat /tmp/headers | egrep -i "location:\s*" | cut -f2 -d":" | awk '{$1=$1};1' | tr -d '\r')
                    # Checking the status of a package upload
                    echo "Checking the status of a package upload"
                    response=$(curl -s -w 'status: %{response_code}\n' -o /dev/null https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V3 }}/submissions/draft/package/operations/$operationID \
                      -H "Authorization: X-ClientID $ClientID" \
                      -H "Authorization: ApiKey $ApiKey")
                    echo $response
                    retries=0
                    while [ -z $(echo $response | egrep "status:\s*200")]; do
                      if [ $retries -gt 10 ]; then
                        echo "Exiting (Checking the status of a package upload) after 10 retries!"
                        exit 1
                      fi
                      sleep 5
                      response=$(curl -w 'status: %{response_code}\n' -v https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V3 }}/submissions/draft/package/operations/$operationID \
                        -H "Authorization: ApiKey $ApiKey")
                      retries=$(($retries+1))
                    done
                    # Publishing the submission
                    echo "Publishing the submission"
                    response=$(curl -s -i -D /tmp/headers2 -w 'status: %{response_code}\n' -o /dev/null https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V3 }}/submissions \
                      -H "Authorization: ApiKey $ApiKey" \
                      -d "$certificationNotes")
                    if [ -n "$(echo $response | egrep "status:\s*202")" ]; then
                      operationID=$(cat /tmp/headers2 | egrep -i "location:\s*" | cut -f2 -d":" | awk '{$1=$1};1' | tr -d '\r')
                      # Checking the publishing status
                      response=$(curl -s -w 'status: %{response_code}\n' -o /dev/null https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V3 }}/submissions/operations/$operationID \
                        -H "Authorization: X-ClientID $ClientID" \
                        -H "Authorization: ApiKey $ApiKey")
                      retries=0
                      while [ -z $(echo $response | egrep "status:\s*200")]; do
                        if [ $retries -gt 10 ]; then
                          echo "Exiting (Checking the publishing status) after 10 retries!"
                          exit 1
                        fi
                        sleep 5
                        response=$(curl -w 'status: %{response_code}\n' -v https://api.addons.microsoftedge.microsoft.com/v1/products/${{ vars.MPC_PRODUCT_ID_V3 }}/submissions/operations/$operationID \
                          -H "Authorization: X-ClientID $ClientID" \
                          -H "Authorization: ApiKey $ApiKey")
                        retries=$(($retries+1))
                      done
                    fi
                  else
                    echo "Package upload failed"
                    echo $response
                    exit 1
                  fi
                  exit 0
              shell: bash

    deploy-chrome:
        needs: post-package-test
        runs-on: ubuntu-latest

        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - name: Download package
              uses: actions/download-artifact@v4
              with:
                  path: '/tmp'

            - name: Set zip name
              run: echo "ZIP_NAME=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

            - name: Publish to Google Web Store (V2)
              run: |
                  # Generate a JWT (JSON Web Token)
                  WEBSTORE_API_URL="https://www.googleapis.com/upload/chromewebstore/v1.1/items/${{vars.GOOGLE_APP_ID_V2}}"
                  ACCESS_TOKEN=$(curl "https://accounts.google.com/o/oauth2/token" -d "client_id=${{ vars.GOOGLE_CLIENT_ID }}&client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }}&refresh_token=${{ secrets.GOOGLE_REFRESH_TOKEN }}&grant_type=refresh_token&redirect_uri=urn:ietf:wg:oauth:2.0:oob" | jq -r .access_token)

                  curl -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "x-goog-api-version: 2" -X PUT -T /tmp/artifact/${{ env.ZIP_NAME }}.zip -v "${WEBSTORE_API_URL}"
                  curl -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "x-goog-api-version: 2" -H "Content-Length: 0" -X POST -v "${WEBSTORE_API_URL}/publish"
              shell: bash
            - name: Publish to Google Web Store (V3)
              run: |
                  # Generate a JWT (JSON Web Token)
                  WEBSTORE_API_URL="https://www.googleapis.com/upload/chromewebstore/v1.1/items/${{vars.GOOGLE_APP_ID}}"
                  ACCESS_TOKEN=$(curl "https://accounts.google.com/o/oauth2/token" -d "client_id=${{ vars.GOOGLE_CLIENT_ID }}&client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }}&refresh_token=${{ secrets.GOOGLE_REFRESH_TOKEN }}&grant_type=refresh_token&redirect_uri=urn:ietf:wg:oauth:2.0:oob" | jq -r .access_token)

                  curl -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "x-goog-api-version: 2" -X PUT -T /tmp/artifact/${{ env.ZIP_NAME }}.zip -v "${WEBSTORE_API_URL}"
                  curl -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "x-goog-api-version: 2" -H "Content-Length: 0" -X POST -v "${WEBSTORE_API_URL}/publish"
              shell: bash
    deploy-github:
        needs: post-package-test
        runs-on: ubuntu-latest
        steps:
            - name: Download package
              uses: actions/download-artifact@v4
              with:
                  path: '/tmp'

            - name: Set zip name
              run: echo "ZIP_NAME=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

            - name: Release
              uses: softprops/action-gh-release@v2
              if: startsWith(github.ref, 'refs/tags/')
              with:
                files: '/tmp/artifact/${{ env.ZIP_NAME }}.zip'
